import React, { useMemo, useState, useEffect } from "react"; import { motion } from "framer-motion"; import { Button } from "@/components/ui/button"; import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"; import { Input } from "@/components/ui/input"; import { Textarea } from "@/components/ui/textarea"; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"; import { Badge } from "@/components/ui/badge"; import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"; import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"; import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"; import { AlertCircle, Briefcase, Download, Filter, HeartHandshake, Mail, MapPin, Search, Target, Users } from "lucide-react";

// --------------------------------------------- // Mindspring — Nonprofit Website (Single File) // --------------------------------------------- // Features: // - Home, About, Programs, Careers (with 7+ remote roles), Contact sections // - Search & filter jobs (department, full-time/part-time, level) // - Apply modal per job; saves applications to localStorage // - Export applications as CSV, or email via mailto link // - Clean Tailwind + shadcn/ui + framer-motion animations // ---------------------------------------------

const JOBS = [ { id: "gw-001", title: "Grant Writer (Remote)", department: "Development", level: "Mid", type: "Contract", location: "Remote", summary: "Research and write compelling grants to fund Mindspring programs across education and workforce development.", responsibilities: [ "Identify funding opportunities and align proposals with program impact", "Draft, edit, and submit grants with required attachments", "Coordinate with Programs and Finance for budgets and outcomes", ], requirements: [ "2+ years grant writing", "Excellent written communication", "Experience with foundations and CSR portals", ], }, { id: "pm-002", title: "Program Manager – Digital Skills (Remote)", department: "Programs", level: "Senior", type: "Full-time", location: "Remote", summary: "Lead delivery of Mindspring's digital skills bootcamps, ensuring learner success and partner satisfaction.", responsibilities: [ "Own program timelines, KPIs, and budget", "Manage facilitators and volunteer mentors", "Report outcomes to leadership and funders", ], requirements: [ "4+ years program management", "Data-driven mindset", "EdTech or nonprofit experience a plus", ], }, { id: "oc-003", title: "Outreach & Partnerships Coordinator (Remote)", department: "Programs", level: "Junior", type: "Full-time", location: "Remote", summary: "Grow our community reach by building relationships with NGOs, employers, and local hubs.", responsibilities: [ "Prospect and onboard new partners", "Coordinate community events and webinars", "Maintain CRM accuracy", ], requirements: [ "1+ year partnerships or outreach", "Strong communication and organization", "Comfortable presenting online", ], }, { id: "da-004", title: "Impact Data Analyst (Remote)", department: "Insights", level: "Mid", type: "Full-time", location: "Remote", summary: "Turn program data into insights that improve learner outcomes and inform funders.", responsibilities: [ "Design dashboards and track KPIs", "Run A/B tests and cohort analyses", "Support MEL (Monitoring, Evaluation & Learning)", ], requirements: [ "SQL + spreadsheets proficiency", "Experience with data viz tools", "Impact measurement background preferred", ], }, { id: "cd-005", title: "Curriculum Designer – Remote Learning", department: "Programs", level: "Mid", type: "Contract", location: "Remote", summary: "Design engaging, inclusive learning content for remote delivery (tech, soft skills, job readiness).", responsibilities: [ "Create modules, projects, rubrics", "Collaborate with SMEs and facilitators", "Iterate based on learner feedback", ], requirements: [ "Instructional design experience", "Knowledge of adult learning principles", "Portfolio of curriculum work", ], }, { id: "cl-006", title: "Communications Lead (Remote)", department: "Communications", level: "Senior", type: "Full-time", location: "Remote", summary: "Own brand voice across channels, manage campaigns, press, and storytelling for impact.", responsibilities: [ "Build comms calendar and campaigns", "Manage social, email, and PR", "Coach staff on storytelling", ], requirements: [ "5+ years comms/marketing", "Strong writing & editing", "Nonprofit/impact sector exposure", ], }, { id: "vc-007", title: "Volunteer Community Coordinator (Remote)", department: "Community", level: "Junior", type: "Part-time", location: "Remote", summary: "Recruit, onboard, and engage volunteers to mentor learners and support events.", responsibilities: [ "Manage volunteer funnel", "Schedule sessions and orientations", "Recognize and retain volunteers", ], requirements: [ "People-first, organized", "Event coordination experience", "Familiarity with volunteer CRMs", ], }, { id: "hr-008", title: "People Operations Generalist (Remote)", department: "Operations", level: "Mid", type: "Full-time", location: "Remote", summary: "Support hiring, onboarding, and a thriving remote culture at Mindspring.", responsibilities: [ "Own onboarding/offboarding", "Support policy and compliance", "Coordinate payroll & benefits vendors", ], requirements: [ "3+ years HR/People Ops", "Familiar with remote-first practices", "HRIS experience", ], }, { id: "wd-009", title: "Web & Systems Developer (Remote)", department: "Technology", level: "Mid", type: "Contract", location: "Remote", summary: "Maintain Mindspring web properties and automate internal workflows.", responsibilities: [ "Build and maintain websites", "Integrate forms/CRMs and automation", "Security and accessibility best practices", ], requirements: [ "Modern JS/TS stack", "APIs, webhooks, automation", "Accessibility mindset", ], }, ];

const DEPARTMENTS = ["All", ...Array.from(new Set(JOBS.map(j => j.department)))]; const LEVELS = ["All", "Junior", "Mid", "Senior"]; const TYPES = ["All", "Full-time", "Part-time", "Contract"];

const initialAppForm = (job) => ({ jobId: job?.id || "", jobTitle: job?.title || "", fullName: "", email: "", phone: "", location: "", linkedin: "", portfolio: "", cover: "", resumeName: "", consent: false, });

const saveApplication = (app) => { const key = "mindspring_applications_v1"; const prev = JSON.parse(localStorage.getItem(key) || "[]"); prev.push({ ...app, submittedAt: new Date().toISOString() }); localStorage.setItem(key, JSON.stringify(prev)); };

const getApplications = () => { try { return JSON.parse(localStorage.getItem("mindspring_applications_v1") || "[]"); } catch { return []; } };

const exportCSV = () => { const rows = getApplications(); if (!rows.length) return; const headers = Object.keys(rows[0]); const csv = [headers.join(",")] .concat( rows.map((r) => headers.map((h) => "${String(r[h] ?? "").replaceAll('"', '""')}").join(",")) ) .join("\n"); const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" }); const url = URL.createObjectURL(blob); const a = document.createElement("a"); a.href = url; a.download = mindspring_applications_${new Date().toISOString().slice(0,10)}.csv; document.body.appendChild(a); a.click(); a.remove(); };

const Section = ({ id, children, className = "" }) => (

  <section id={id} className={`max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 ${className}`}>{children}</section>
);const NavLink = ({ href, children }) => ( <a href={href} className="text-sm font-medium text-gray-600 hover:text-gray-900"> {children} </a> );

function JobCard({ job, onApply }) { return ( <motion.div layout initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }}> <Card className="rounded-2xl shadow-sm hover:shadow-md transition"> <CardHeader className="flex flex-row items-start justify-between gap-3"> <div> <CardTitle className="text-lg">{job.title}</CardTitle> <div className="mt-2 flex flex-wrap items-center gap-2 text-sm text-gray-600"> <span className="inline-flex items-center gap-1"><Briefcase className="h-4 w-4" />{job.department}</span> <span className="inline-flex items-center gap-1"><Target className="h-4 w-4" />{job.level}</span> <span className="inline-flex items-center gap-1"><MapPin className="h-4 w-4" />{job.location}</span> <Badge variant="secondary">{job.type}</Badge> </div> </div> </CardHeader> <CardContent className="space-y-4"> <p className="text-sm text-gray-700">{job.summary}</p> <div className="grid sm:grid-cols-2 gap-4 text-sm"> <div> <p className="font-medium mb-1">Responsibilities</p> <ul className="list-disc pl-5 space-y-1 text-gray-700"> {job.responsibilities.map((r, i) => <li key={i}>{r}</li>)} </ul> </div> <div> <p className="font-medium mb-1">Requirements</p> <ul className="list-disc pl-5 space-y-1 text-gray-700"> {job.requirements.map((r, i) => <li key={i}>{r}</li>)} </ul> </div> </div> <div className="flex flex-wrap gap-3"> <Button onClick={() => onApply(job)} className="rounded-2xl">Apply Now</Button> <a href={mailto:careers@mindspring.org?subject=Application%20-%20${encodeURIComponent(job.title)}&body=Hello%20Mindspring%20Team,%0D%0A%0D%0AI'd%20like%20to%20apply%20for%20the%20${encodeURIComponent(job.title)}%20role.%20See%20my%20details%20below:%0D%0A%0D%0A-%20Full%20Name:%0D%0A-%20Phone:%0D%0A-%20Location:%0D%0A-%20LinkedIn:%0D%0A-%20Portfolio:%0D%0A-%20Cover%20Note:%0D%0A%0D%0AThank%20you!} className="text-sm inline-flex items-center gap-2 underline text-gray-700 hover:text-gray-900" > <Mail className="h-4 w-4" /> Apply via Email </a> </div> </CardContent> </Card> </motion.div> ); }

function ApplyDialog({ open, onOpenChange, job }) { const [form, setForm] = useState(initialAppForm(job));

useEffect(() => { setForm(initialAppForm(job)); }, [job]);

const update = (k, v) => setForm((f) => ({ ...f, [k]: v }));

const handleSubmit = (e) => { e?.preventDefault?.(); if (!form.fullName || !form.email || !form.consent) { alert("Please provide your name, email, and consent to proceed."); return; } saveApplication(form); onOpenChange(false); setTimeout(() => alert("Application submitted! We'll be in touch via email."), 50); };

return ( <Dialog open={open} onOpenChange={onOpenChange}> <DialogContent className="max-w-2xl rounded-2xl"> <DialogHeader> <DialogTitle>Apply for {job?.title}</DialogTitle> <DialogDescription> Complete the form below. Your application is saved securely in this browser and shared with our team. </DialogDescription> </DialogHeader> <form onSubmit={handleSubmit} className="space-y-4"> <div className="grid sm:grid-cols-2 gap-4"> <div> <label className="text-sm font-medium">Full name</label> <Input value={form.fullName} onChange={(e) => update("fullName", e.target.value)} placeholder="Jane Doe" /> </div> <div> <label className="text-sm font-medium">Email</label> <Input type="email" value={form.email} onChange={(e) => update("email", e.target.value)} placeholder="jane@email.com" /> </div> <div> <label className="text-sm font-medium">Phone</label> <Input value={form.phone} onChange={(e) => update("phone", e.target.value)} placeholder="+234 800 000 0000" /> </div> <div> <label className="text-sm font-medium">Location (City, Country)</label> <Input value={form.location} onChange={(e) => update("location", e.target.value)} placeholder="Lagos, Nigeria" /> </div> <div className="sm:col-span-2"> <label className="text-sm font-medium">LinkedIn</label> <Input value={form.linkedin} onChange={(e) => update("linkedin", e.target.value)} placeholder="https://linkedin.com/in/username" /> </div> <div className="sm:col-span-2"> <label className="text-sm font-medium">Portfolio (Optional)</label> <Input value={form.portfolio} onChange={(e) => update("portfolio", e.target.value)} placeholder="Website, GitHub, etc." /> </div> <div className="sm:col-span-2"> <label className="text-sm font-medium">Cover note</label> <Textarea value={form.cover} onChange={(e) => update("cover", e.target.value)} placeholder="Briefly tell us why you're a great fit." /> </div> <div className="sm:col-span-2"> <label className="text-sm font-medium">Attach résumé (filename only)</label> <Input value={form.resumeName} onChange={(e) => update("resumeName", e.target.value)} placeholder="resume_jane_doe.pdf" /> <p className="text-xs text-gray-500 mt-1">For privacy in this demo, we only collect the file name. You can email the actual file after submission.</p> </div> <div className="sm:col-span-2 flex items-center gap-2 text-sm"> <input id="consent" type="checkbox" checked={form.consent} onChange={(e) => update("consent", e.target.checked)} /> <label htmlFor="consent">I consent to Mindspring processing my application data for recruitment.</label> </div> </div> <DialogFooter className="gap-2"> <Button type="button" variant="secondary" onClick={() => onOpenChange(false)}>Cancel</Button> <Button type="submit">Submit Application</Button> <a href={mailto:careers@mindspring.org?subject=Application%20-%20${encodeURIComponent(job?.title || "")}&body=${encodeURIComponent( Hello Mindspring Team,\n\nI have submitted my application for the ${job?.title}.\n\nName: ${form.fullName}\nPhone: ${form.phone}\nLocation: ${form.location}\nLinkedIn: ${form.linkedin}\nPortfolio: ${form.portfolio}\nCover: ${form.cover}\nResume: ${form.resumeName}\n\nThank you! )}} className="inline-flex items-center gap-2 text-sm underline text-gray-700 hover:text-gray-900" > <Mail className="h-4 w-4" /> Email My Details </a> </DialogFooter> </form> </DialogContent> </Dialog> ); }

export default function MindspringSite() { const [query, setQuery] = useState(""); const [dept, setDept] = useState("All"); const [level, setLevel] = useState("All"); const [type, setType] = useState("All"); const [open, setOpen] = useState(false); const [activeJob, setActiveJob] = useState(null); const [appsCount, setAppsCount] = useState(0);

useEffect(() => { setAppsCount(getApplications().length); }, [open]);

const filtered = useMemo(() => { return JOBS.filter((j) => (dept === "All" || j.department === dept) && (level === "All" || j.level === level) && (type === "All" || j.type === type) && (query.trim() === "" || [j.title, j.summary, j.department, j.level, j.type].join(" ").toLowerCase().includes(query.toLowerCase())) ); }, [query, dept, level, type]);

const onApply = (job) => { setActiveJob(job); setOpen(true); };

return ( <div className="min-h-screen bg-gradient-to-b from-white to-slate-50 text-gray-900"> {/* NAVBAR */} <header className="sticky top-0 z-40 bg-white/70 backdrop-blur border-b"> <Section className="py-3 flex items-center justify-between"> <a href="#home" className="flex items-center gap-2"> <div className="h-9 w-9 rounded-2xl bg-emerald-600 grid place-content-center text-white font-bold">M</div> <span className="text-lg font-semibold">Mindspring</span> </a> <nav className="hidden md:flex gap-6"> <NavLink href="#about">About</NavLink> <NavLink href="#programs">Programs</NavLink> <NavLink href="#careers">Careers</NavLink> <NavLink href="#contact">Contact</NavLink> </nav> <Sheet> <SheetTrigger asChild> <Button variant="outline" className="md:hidden rounded-2xl">Menu</Button> </SheetTrigger> <SheetContent side="right"> <SheetHeader> <SheetTitle>Navigate</SheetTitle> </SheetHeader> <div className="mt-6 grid gap-4"> {[ ["About", "#about"], ["Programs", "#programs"], ["Careers", "#careers"], ["Contact", "#contact"], ].map(([label, href]) => ( <a key={href} href={href} className="text-base" >{label}</a> ))} </div> </SheetContent> </Sheet> </Section> </header>

{/* HERO */}
  <Section id="home" className="pt-12 pb-12">
    <div className="grid md:grid-cols-2 gap-10 items-center">
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
        <h1 className="text-4xl sm:text-5xl font-extrabold leading-tight">
          Launching potential, unlocking opportunity.
        </h1>
        <p className="mt-4 text-lg text-gray-700">
          Mindspring is a nonprofit expanding access to learning and remote work. We equip people with digital skills and connect them to real jobs—wherever they live.
        </p>
        <div className="mt-6 flex flex-wrap gap-3">
          <a href="#careers"><Button className="rounded-2xl">Explore Remote Roles</Button></a>
          <a href="#about"><Button variant="outline" className="rounded-2xl">Learn More</Button></a>
        </div>
        <div className="mt-6 flex items-center gap-2 text-sm text-emerald-700">
          <HeartHandshake className="h-4 w-4" /> 100% mission-driven, remote-first nonprofit
        </div>
      </motion.div>
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6, delay: 0.1 }}>
        <Card className="rounded-2xl">
          <CardHeader>
            <CardTitle className="text-xl">Our Impact at a Glance</CardTitle>
          </CardHeader>
          <CardContent className="grid sm:grid-cols-3 gap-6">
            {[{k:"Learners Trained", v:"12,500+"},{k:"Job Placements", v:"4,200+"},{k:"Countries Reached", v:"18"}].map((m) => (
              <div key={m.k} className="text-center">
                <div className="text-3xl font-extrabold">{m.v}</div>
                <div className="text-xs text-gray-600 mt-1">{m.k}</div>
              </div>
            ))}
          </CardContent>
        </Card>
      </motion.div>
    </div>
  </Section>

  {/* ABOUT */}
  <Section id="about" className="py-12">
    <div className="grid md:grid-cols-3 gap-6">
      <Card className="rounded-2xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Target className="h-5 w-5"/> Mission</CardTitle>
        </CardHeader>
        <CardContent>
          We advance economic mobility by teaching employable digital skills and bridging learners to remote careers.
        </CardContent>
      </Card>
      <Card className="rounded-2xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Users className="h-5 w-5"/> Approach</CardTitle>
        </CardHeader>
        <CardContent>
          Human-centered learning + mentorship + real-world projects. We partner with employers from day one.
        </CardContent>
      </Card>
      <Card className="rounded-2xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Briefcase className="h-5 w-5"/> Outcomes</CardTitle>
        </CardHeader>
        <CardContent>
          Transparent KPIs and evidence-based programs that translate training into jobs.
        </CardContent>
      </Card>
    </div>
  </Section>

  {/* PROGRAMS */}
  <Section id="programs" className="py-12">
    <Tabs defaultValue="skills" className="w-full">
      <TabsList className="rounded-2xl">
        <TabsTrigger value="skills">Skills</TabsTrigger>
        <TabsTrigger value="mentoring">Mentoring</TabsTrigger>
        <TabsTrigger value="jobs">Jobs Pipeline</TabsTrigger>
      </TabsList>
      <TabsContent value="skills" className="mt-6">
        <div className="grid md:grid-cols-3 gap-6">
          {[
            ["Digital Literacy", "Start from zero and build confidence with devices, apps, and the web."],
            ["Data Fundamentals", "Clean, analyze, and visualize data for decisions."],
            ["Remote Readiness", "Time zones, async comms, and cross-cultural teamwork."],
          ].map(([t, d]) => (
            <Card key={t} className="rounded-2xl"><CardHeader><CardTitle>{t}</CardTitle></CardHeader><CardContent>{d}</CardContent></Card>
          ))}
        </div>
      </TabsContent>
      <TabsContent value="mentoring" className="mt-6">
        <Card className="rounded-2xl"><CardContent className="py-6">Industry mentors guide learners through projects and mock interviews.</CardContent></Card>
      </TabsContent>
      <TabsContent value="jobs" className="mt-6">
        <Card className="rounded-2xl"><CardContent className="py-6">We pair training with active employer partnerships to place graduates in real remote roles.</CardContent></Card>
      </TabsContent>
    </Tabs>
  </Section>

  {/* CAREERS */}
  <Section id="careers" className="py-12">
    <div className="flex flex-col sm:flex-row sm:items-end gap-4">
      <div className="flex-1">
        <h2 className="text-2xl font-bold">Remote Careers at Mindspring</h2>
        <p className="text-gray-600 mt-1">Search and apply for open positions. {appsCount > 0 && (<span className="inline-flex items-center gap-1 ml-1 text-emerald-700"><AlertCircle className="h-4 w-4"/> {appsCount} application(s) saved</span>)}</p>
      </div>
      <div className="flex items-center gap-2">
        <Button onClick={exportCSV} variant="outline" className="rounded-2xl inline-flex gap-2"><Download className="h-4 w-4"/> Export Applications</Button>
      </div>
    </div>

    <div className="mt-6 grid lg:grid-cols-4 gap-4">
      {/* Filters */}
      <div className="lg:col-span-1">
        <Card className="rounded-2xl">
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><Filter className="h-5 w-5"/> Filter</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="text-sm font-medium">Search</label>
              <div className="mt-1 relative">
                <Search className="h-4 w-4 absolute left-3 top-1/2 -translate-y-1/2 text-gray-500"/>
                <Input value={query} onChange={(e) => setQuery(e.target.value)} placeholder="Search roles, skills..." className="pl-9"/>
              </div>
            </div>
            <div>
              <label className="text-sm font-medium">Department</label>
              <Select value={dept} onValueChange={setDept}>
                <SelectTrigger className="w-full"><SelectValue /></SelectTrigger>
                <SelectContent>
                  {DEPARTMENTS.map((d) => <SelectItem key={d} value={d}>{d}</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-sm font-medium">Level</label>
              <Select value={level} onValueChange={setLevel}>
                <SelectTrigger className="w-full"><SelectValue /></SelectTrigger>
                <SelectContent>
                  {LEVELS.map((l) => <SelectItem key={l} value={l}>{l}</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-sm font-medium">Type</label>
              <Select value={type} onValueChange={setType}>
                <SelectTrigger className="w-full"><SelectValue /></SelectTrigger>
                <SelectContent>
                  {TYPES.map((t) => <SelectItem key={t} value={t}>{t}</SelectItem>)}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Jobs List */}
      <div className="lg:col-span-3 grid gap-5">
        {filtered.length === 0 && (
          <Card className="rounded-2xl">
            <CardContent className="py-10 text-center text-gray-600">No roles match your search. Try clearing filters.</CardContent>
          </Card>
        )}
        <div className="grid md:grid-cols-2 gap-5">
          {filtered.map((job) => (
            <JobCard key={job.id} job={job} onApply={onApply} />
          ))}
        </div>
      </div>
    </div>
  </Section>

  {/* CONTACT */}
  <Section id="contact" className="py-12">
    <div className="grid md:grid-cols-2 gap-8 items-start">
      <div>
        <h3 className="text-2xl font-bold">Contact Mindspring</h3>
        <p className="text-gray-700 mt-2">For general questions, partnerships, or press, reach out below.</p>
        <div className="mt-6 grid gap-3 text-sm">
          <a className="inline-flex items-center gap-2 underline" href="mailto:hello@mindspring.org"><Mail className="h-4 w-4"/> hello@mindspring.org</a>
          <a className="inline-flex items-center gap-2 underline" href="#careers"><Briefcase className="h-4 w-4"/> See Open Roles</a>
        </div>
      </div>
      <Card className="rounded-2xl">
        <CardHeader>
          <CardTitle>Send a Message</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <Input placeholder="Your name" />
          <Input type="email" placeholder="Email" />
          <Textarea placeholder="How can we help?" />
          <Button className="rounded-2xl">Send</Button>
        </CardContent>
      </Card>
    </div>
  </Section>

  {/* FOOTER */}
  <footer className="border-t mt-12">
    <Section className="py-8 text-sm flex flex-col md:flex-row gap-3 items-center justify-between">
      <div className="text-gray-600">© {new Date().getFullYear()} Mindspring Foundation. All rights reserved.</div>
      <div className="flex items-center gap-2">
        <Badge variant="secondary" className="rounded-2xl">Remote-first</Badge>
        <Badge variant="secondary" className="rounded-2xl">Equal Opportunity</Badge>
        <Badge variant="secondary" className="rounded-2xl">Nonprofit</Badge>
      </div>
    </Section>
  </footer>

  {/* APPLY DIALOG */}
  <ApplyDialog open={open} onOpenChange={setOpen} job={activeJob} />
</div>

); }

